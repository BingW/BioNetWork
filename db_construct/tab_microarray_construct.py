#coding:utf-8
import os
import math
import sqlite3
black_list = ['S000007287', 'S000007288', 'S000028518', 'S000029703', 'S000125018',\
        'S000029723', 'S000125022', 'S000125021', 'S000028514', 'S000113555', \
        'S000006659', 'S000006666', 'S000006662', 'S000006664', 'S000130715', \
        'S000029698', 'S000029654', 'S000145155', 'S000113613', 'S000119380', \
        'S000132612', 'S000006665', 'S000006667', 'S000006660', 'S000029237', \
        'S000080162', 'S000028698', 'S000029681', 'S000029682', 'S000029686', \
        'S000029687', 'S000029688', 'S000029658', 'S000029690', 'S000029659', \
        'S000029660', 'S000029661', 'S000029692', 'S000029663', 'S000029693', \
        'S000029694', 'S000029664', 'S000029665', 'S000029695', 'S000029696', \
        'S000029697', 'S000029666', 'S000007436', 'S000132614', 'S000029674', \
        'S000006483', 'S000006485', 'S000006480', 'S000029708', 'S000029710', \
        'S000029711', 'S000006488', 'S000006489', 'S000029675', 'S000029676', \
        'S000114171', 'S000029023', 'S000028567', 'S000130127', 'S000130129', \
        'S000130131', 'S000130133', 'S000028470', 'S000028474', 'S000006491', \
        'S000007499', 'S000087162', 'S000007441', 'S000007500', 'S000029463', \
        'S000007501', 'S000007497', 'S000007304', 'S000007460', 'S000006496', \
        'S000081374', 'S000081375', 'S000028467', 'S000028468', 'S000028466', \
        'S000081376', 'S000119075', 'S000114301', 'S000006553', 'S000029010', \
        'S000029531', 'S000029532', 'S000029534', 'S000029535', 'S000006688', \
        'S000006579', 'S000006590', 'S000006684', 'S000006682', 'S000006681', \
        'S000006779', 'S000006735', 'S000006778', 'S000006785', 'S000006782', \
        'S000006783', 'S000006637', 'S000006640', 'S000006636', 'S000006780', \
        'S000006730', 'S000006781', 'S000006784', 'S000028422', 'S000124112', \
        'S000006680', 'S000133140', 'S000028813', 'S000028593', 'S000028595', \
        'S000028529', 'S000028597', 'S000028532', 'S000028603', 'S000028534', \
        'S000028816', 'S000028535', 'S000087085', 'S000028817', 'S000029722', \
        'S000028605', 'S000028606', 'S000087203', 'S000028818', 'S000028519', \
        'S000029724', 'S000028536', 'S000113557', 'S000028520', 'S000028819', \
        'S000028538', 'S000028539', 'S000028541', 'S000028542', 'S000113553', \
        'S000087209', 'S000028739', 'S000028546', 'S000028625', 'S000028627', \
        'S000028547', 'S000028630', 'S000028632', 'S000028548', 'S000028826', \
        'S000028635', 'S000087160', 'S000028827', 'S000028550', 'S000028638', \
        'S000029726', 'S000028639', 'S000028640', 'S000028551', 'S000028828', \
        'S000028829', 'S000028830', 'S000028645', 'S000028832', 'S000028552', \
        'S000028553', 'S000028650', 'S000028651', 'S000028652', 'S000028653', \
        'S000028654', 'S000028835', 'S000028836', 'S000113587', 'S000028556', \
        'S000028511', 'S000028837', 'S000028838', 'S000028804', 'S000028662', \
        'S000028805', 'S000028523', 'S000028513', 'S000028557', 'S000113559', \
        'S000113563', 'S000028524', 'S000028667', 'S000028558', 'S000028560', \
        'S000028672', 'S000113566', 'S000028561', 'S000028562', 'S000028564', \
        'S000028565', 'S000028566', 'S000028569', 'S000028525', 'S000028571', \
        'S000028845', 'S000028683', 'S000028572', 'S000028686', 'S000028573', \
        'S000028691', 'S000028574', 'S000028692', 'S000028848', 'S000028693', \
        'S000028576', 'S000028694', 'S000028849', 'S000028696', 'S000028697', \
        'S000028850', 'S000028810', 'S000028851', 'S000028852', 'S000028706', \
        'S000028811', 'S000028707', 'S000028854', 'S000028855', 'S000028580', \
        'S000028709', 'S000028581', 'S000028526', 'S000028710', 'S000028856', \
        'S000028516', 'S000028712', 'S000028857', 'S000028858', 'S000028584', \
        'S000028586', 'S000028587', 'S000028718', 'S000028588', 'S000028859', \
        'S000028721', 'S000122558', 'S000028425', 'S000028590', 'S000113589', \
        'S000028725', 'S000028515', 'S000006511', 'S000006512', 'S000006513', \
        'S000006522', 'S000006523', 'S000007315', 'S000006526', 'S000006527', \
        'S000006529', 'S000007316', 'S000006530', 'S000006531', 'S000006532', \
        'S000006533', 'S000006534', 'S000006535', 'S000006537', 'S000006538', \
        'S000006539', 'S000006540', 'S000006541', 'S000006542', 'S000006543', \
        'S000006544', 'S000006545', 'S000007317', 'S000006547', 'S000006551', \
        'S000006552', 'S000006554', 'S000006555', 'S000006556', 'S000007318', \
        'S000006562', 'S000006563', 'S000006564', 'S000006565', 'S000006566', \
        'S000006567', 'S000006568', 'S000006569', 'S000006570', 'S000006571', \
        'S000007319', 'S000006580', 'S000006581', 'S000006582', 'S000007320', \
        'S000006594', 'S000006595', 'S000006596', 'S000006597', 'S000007321', \
        'S000006600', 'S000006601', 'S000006602', 'S000006603', 'S000006604', \
        'S000006605', 'S000006606', 'S000006608', 'S000006609', 'S000006610', \
        'S000006611', 'S000006612', 'S000007322', 'S000006613', 'S000006614', \
        'S000006615', 'S000006616', 'S000006617', 'S000006618', 'S000006619', \
        'S000006620', 'S000006621', 'S000006622', 'S000006623', 'S000006624', \
        'S000006626', 'S000006627', 'S000006628', 'S000006629', 'S000006630', \
        'S000006631', 'S000006632', 'S000006633', 'S000006634', 'S000006635', \
        'S000007323', 'S000006638', 'S000006639', 'S000006641', 'S000006642', \
        'S000006643', 'S000006644', 'S000006645', 'S000006647', 'S000006648', \
        'S000006649', 'S000006651', 'S000006652', 'S000006653', 'S000007324', \
        'S000006654', 'S000006655', 'S000006656', 'S000006658', 'S000007325', \
        'S000007326', 'S000006669', 'S000006670', 'S000006672', 'S000006673', \
        'S000006674', 'S000006675', 'S000006676', 'S000006677', 'S000007327', \
        'S000006683', 'S000006685', 'S000006686', 'S000006687', 'S000006689', \
        'S000007328', 'S000006698', 'S000007329', 'S000006701', 'S000007330', \
        'S000006711', 'S000006712', 'S000006713', 'S000007331', 'S000006725', \
        'S000006726', 'S000006731', 'S000006733', 'S000007332', 'S000007333', \
        'S000006737', 'S000006738', 'S000006739', 'S000006740', 'S000006741', \
        'S000006742', 'S000006744', 'S000006745', 'S000006746', 'S000006747', \
        'S000006749', 'S000006750', 'S000006751', 'S000007334', 'S000007335', \
        'S000006753', 'S000006754', 'S000006755', 'S000006756', 'S000006757', \
        'S000006758', 'S000006760', 'S000006761', 'S000006762', 'S000006763', \
        'S000006764', 'S000006765', 'S000006766', 'S000006768', 'S000006770', \
        'S000007336', 'S000006771', 'S000006772', 'S000006773', 'S000006774', \
        'S000006775', 'S000006776', 'S000007337', 'S000006777', 'S000007338']

Coon = sqlite3.connect('/Users/bingwang/VimWork/db/Scer.db')
C = Coon.cursor()
#TABLE ID2GO (SGDID,GOID,slim,GO_Term,GO_Aspect,GO_Definition)
other2ID = {}
for row in C.execute("SELECT * FROM other2ID"):
    other2ID[row[0]] = row[1]

ID_sum = []
for row in C.execute("SELECT SGDID FROM ID2GO"):
    if row[0] not in ID_sum and row[0] not in black_list:
        ID_sum.append(row[0])

#g = open("/Users/bingwang/VimWork/db/ScerMicro.tab","w")
g = open("/Users/bingwang/VimWork/db/ScerMicro_b.tab","w")
g.write("\t")
for SGDID in ID_sum:
    g.write(SGDID+"\t")
g.write("\n")
Microarray_Path = "/Users/bingwang/VimWork/db/Microarray/archive/"
pclfiles = [name for name in os.listdir(Microarray_Path) if name.endswith(".pcl")]

for i,filename in enumerate(pclfiles):
    PMID = filename.split(".")[0]
    f = open(Microarray_Path+filename)
    conditions = f.readline().split("\t")[3:]
    CID_dict = [PMID+"_"+str(j) for j in range(len(conditions))]
    f.readline()
    M_dict = {}
    for line in f:
        elements = line.replace("\n","").replace("\r","").split("\t")
        if len(elements[3:]) != len(conditions):
            print "check "+PMID+" gene "+elements[0]+" column seems not right"
            continue
        try:
            SGDID = other2ID[elements[0]]
            M_dict[SGDID] = {}
        except:
            continue
        for k,value in enumerate(elements[3:]):
            CID = PMID+"_"+str(k)
            try:
                value = float(value)            
            except:
                value = float("nan")
            M_dict[SGDID][CID] = value

    for CID in CID_dict:
        g.write(CID+"\t")
        for SGDID in ID_sum:
            if SGDID not in M_dict:
                g.write("99\t")
            else:
                #g.write(str(round(M_dict[SGDID][CID],2))+"\t")
                if M_dict[SGDID][CID] >= 1:
                    g.write("1\t")
                elif M_dict[SGDID][CID] <= -1:
                    g.write("2\t")
                elif -1 < M_dict[SGDID][CID] < 1:
                    g.write("0\t")
                else:
                    g.write("99\t")
        g.write("\n")
    print filename+" finished!  "+str((i+1)*1.0/len(pclfiles))+"% done!"
